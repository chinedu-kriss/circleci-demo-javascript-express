  version: 2.1
  
  commands:
      destroy_environment:
        steps:
          - run:
              name: Destroy environment
              # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
              # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
              when: on_fail
              command: |
                aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}

  jobs:
      create_infrastructure: 
        docker:
          - image: amazon/aws-cli
        steps:
          - checkout
          - run:
              name: Create Cloudformation Stack
              command: |
                aws cloudformation deploy \
                  --template-file template.yml \
                  --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
                  --region us-east-1
      
      configure_infrastructure: 
        docker: 
          - image: python:3.7-alpine3.11
        steps:
          - checkout
          - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["b8:b7:fd:9f:90:3b:e2:4f:9b:18:1c:e9:99:5f:d3:ea"] 
          - run:
              name: Install Ansible
              command: apk add --update ansible
              # Install Ansible
          - run:
              name: Run Playbook and Configure server
              command: ansible-playbook -i inventory.txt main_remote.yml
              # Your command

      smoke_test:
        docker:
          - image: alpine:latest
        steps:
          - run:
              name: Test job
              # Fail the job intentionally to simulate an error.
              command:  return 1
          - destroy_environment

      create_and_deploy_front_end:
        docker:
          - image: amazon/aws-cli
        steps:
          - checkout
          - run:
              name: Execute bucket.yml - Create Cloudformation Stack
              command: |
                aws cloudformation deploy \
                --template-file bucket.yml \
                --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
                --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"     

      get_last_deployment_id:
        docker:
          - image: amazon/aws-cli
        steps:
          - checkout
          - run: yum install -y tar gzip
          - run:
              name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
              command: |
                aws cloudformation \
                list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
                --no-paginate --output text > ~/textfile.txt
          - persist_to_workspace:
              root: ~/
              paths: 
                - textfile.txt
      
      promote_to_production:
        docker:
          - image: amazon/aws-cli
        steps:
          - checkout
          - run:
              name: Execute cloudfront.yml
              command: |
                aws cloudformation deploy \
                --template-file cloudfront.yml \
                --stack-name production-distro \
                --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"     

      clean_up_old_front_end:
        docker:
          - image: amazon/aws-cli
        steps:
          - checkout
          - run: yum install -y tar gzip
          - attach_workspace:
              at: ~/
          - run:
              name: Destroy the previous production version's S3 bucket and CloudFormation stack. 
              # Use $OldBucketID environment variable or mybucket644752792305 below.
              # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
              command: |
                export myawsbucket-prod=$(cat ~/textfile.txt)
                aws s3 rm "s3://myawsbucket-prod" --recursive               

  workflows:
    myWorkflow:
      jobs:
        #- create_infrastructure
        #- configure_infrastructure
        #- smoke_test
        - create_and_deploy_front_end
        - promote_to_production:
            requires: 
              - create_and_deploy_front_end
        - get_last_deployment_id
        - clean_up_old_front_end:
            requires:
              - get_last_deployment_id
              - promote_to_production
      
